extends layout

include mixins/resource_bars

block content
	-var o2_icon = "<span class=\"glyphicon glyphicon-thumbs-up\"></span>"
	-var zz_icon = "<span class=\"glyphicon glyphicon-usd\"></span>"

	.container.text-justify

		div.panel.panel-custom
			h1= title
			p Fix your apps to earn hype and cash!

		div.panel.panel-custom
			h3 Rules

			p
				| Your campany owns some apps currently deployed on the cloud.
				| Each app, whenever it works, earns you some hype and some cash.
				| The quantities of each ressource is represented by the following gauges:

			p.container-fluid
				.col-xs-6
					+o2-bar({oxygen: 800})
				.col-xs-6
					+zz-bar({energy: 1000})

			br
			br
			p
				| Each round, your startup spends&nbsp;
				span.text-danger
					strong 50&nbsp;
					!= o2_icon
				| &nbsp;and&nbsp
				span.text-danger
					strong 50&nbsp;
					!= zz_icon
				| .
				| If one of the resources reaches&nbsp;
				span.text-danger 0
				| , then you go bankrupt.

			p
				| Apps that work will earn your startup some hype and some cash.
				| There are 11 apps that will each make you earn one of these resources or both.

			div.panel.panel-custom.panel-dome
				div.container#canvas-dome
					button.slot-icon.btn.btn-success#bug_hello
					button.slot-icon.btn.btn-danger#FireMatches
					button.slot-icon.btn.btn-success#Filther
					button.slot-icon.btn.btn-success#PearMap
					button.slot-icon.btn.btn-danger#PegMobile
					button.slot-icon.btn.btn-danger#ROMCryption
					button.slot-icon.btn.btn-success#SuperSecretSafeSystemSolution
					button.slot-icon.btn.btn-success#Wrottit

			h4 Generating hype and earning money
			p
				| Each round, you're apps are tested by a group of highly qualified testers
				| (typically a CRON  job). Your investors love capitalism and want you to
				| pay your testers every round. Your profits will need to overcome their
				| salaries for you to stay on the market. When your apps function correctly,
				| you will earn your hard-earned cash and hype for each round that the clients
				| love your app.

			table.table
				tr
					td(width='25%') Example 1:
					th(width='5%')!= o2_icon
					th(width='15%').text-success +5
					th(width='5%')!= zz_icon
					th(width='15%').text-success +5
					th +10 pts / round

			p
				| The kind and the amount of resource produced is different for each app.
				| This allows you to express yourselves with clever development (err debugging)
				| strategies.

			table.table
				tr
					td(width='25%') Example 2:
					th(width='5%')!= o2_icon
					th(width='15%').text-success +15
					th(width='5%')!= zz_icon
					th(width='15%').text-success +10
					th +20 pts / round

			p
				| By the way, some apps could actually require en investment in a particular resource
				| in order to produce another. Be wise.

			table.table
				tr
					td(width='25%') Example 3:
					th(width='5%')!= o2_icon
					th(width='15%').text-success +20
					th(width='5%')!= zz_icon
					th(width='15%').text-danger -5
					th +25 pts / round

			p
				| To be competitive on the market, you need to ship fast. Unfortunately, shipping fast
				| also means not reinventing the wheel (and sometimes using already functionnal square wheels).
				| This means that the apps your startup has developped might not work as expected.
				| And if it doesn't, you don't earn money, nor hype, and therefore no happiness.

			p
				| In this competition, your objective is simply to escape from imminent bankruptcy.
				| Do so by fixing as many of your apps as fast as possible.
				| Remember that if any of your resources hit 0, you will not be able to pay your 
				| salaries and your startup will go bankrupt.
				strong.text-danger &nbsp;This means that you instantaneously lose the
					| competition and have to leave the room immediately.

			h4 Cloning the test environment
			p
				| To fix the apps, you must firt obtain the testing environment.
				| Type the following commands in a terminal.
				| Don't forget to replace IP and TEAM with the right values
				| The passwords are those assigned to your teams.
				pre
					| $ git clone ssh://TEAM@IP:9291/home/TEAM/debug
					| $ cd debug
					| $ ./clone_repos.sh

			p All the apps have been cloned into your computer.
				pre
					| $ ls
					| bug_hello/
					| FireMatches/
					| Filther/
					| ...


			h4 Debugging the apps
			p
				| Each system is explained by its own documentation. See the
				| README.md file in each directory.
				| Wall Street strongly recommends to start with bug_hello.
				pre
					| $ cd bug_hello/
					| $ cat README.md
			p
				| The README is also available in the web interface by clicking
				| on a bug button in your team page.

			p
				| Read carefully the README and take a look at the tests files to
				| understand the expected behavior of the programs.
				| You can then fix the sources.
				pre
					| $ vim src/main.nit # fix that bug!

			p
				| You can test your changes locally with a set of test inputs.
				| Use the diff command to check the differences between
				| your output and the expected one.

				pre
					| $ make check
					| Compile bin...
					| Run tests...
					|  * [OK] test1
					|  * [FAIL] test2 (diff out/test_02.out tests/test_02.res)
					| ...
					| $ diff out/test_02.out tests/test_02.res


			h4 Pushing the bug fixes to the tester group
			p.text-danger
				| Once you have debugged a system you MUST push it to your team repository
				| so the fixed version will be available for the testers to test.

				pre
					| git add -A
					| git commit -m "I fixed that bug!"
					| git push origin master

			p
				| That's it! The new version of the system is deployed and you can
				| wait for the cron to test it.
				| Check your web interface for more information on the program,
				| the resources it produces and the status of the last check performed
				| by the cron.

			p.text-warning
				b <i>Final note:</i>
					| You do not need to edit anything outside of the src/ directory.
					| Everything else will not be considered by the cron.
