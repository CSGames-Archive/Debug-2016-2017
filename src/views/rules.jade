extends layout

include mixins/resource_bars

block content
	-var o2_icon = "<span><b>O<sup>2</sup></b></span>"
	-var zz_icon = "<span class=\"glyphicon glyphicon-flash\"></span>"

	.container.text-justify

		div.panel.panel-custom
			h1= title
			p Keep the dome systems up and running to survive!

		div.panel.panel-custom
			h3 Rules

			p
				| The dome needs energy to power up the main systems and also
				| generate oxygen so the inhabitants can breath.
				| The dome oxygen and energy levels are represented by these gauges:

			p.container-fluid
				.col-xs-6
					+o2-bar({oxygen: 800})
				.col-xs-6
					+zz-bar({energy: 1000})

			br
			br
			p
				| Each round, the dome consumes&nbsp;
				span.text-danger
					strong 50&nbsp;
					!= o2_icon
				| &nbsp;and&nbsp
				span.text-danger
					strong 50&nbsp;
					!= zz_icon
				| .
				| If one of the resources reaches&nbsp;
				span.text-danger 0
				| , then everyone under the dome dies.

			p
				| To generate power and oxygen, the dome relies on automated life support
				| systems that control the main generators and regulators of the dome.
				| There is 15 systems that need to be running to keep the dome and its
				| inhabitants safe.

			div.panel.panel-custom.panel-dome
				div.container#canvas-dome
					button.slot-icon.btn.btn-success#access_panel
					button.slot-icon.btn.btn-danger#alu_sim
					button.slot-icon.btn.btn-success#atomic_engine
					button.slot-icon.btn.btn-danger#bug_hello
					button.slot-icon.btn.btn-danger#domesec
					button.slot-icon.btn.btn-success#doors
					button.slot-icon.btn.btn-success#power_grid
					button.slot-icon.btn.btn-success#shield_gen
					button.slot-icon.btn.btn-danger#thermal_reactor
					button.slot-icon.btn.btn-success#ventilation
					button.slot-icon.btn.btn-danger#water_supply

			h4 Producing oxygen and energy
			p
				| At each round, the dome cron generates a series of configuration input
				| parameters that allows each system to function.
				| If the system processes the configuration input parameters as expected,
				| the underlying generator is activated and a resource is produced.

			table.table
				tr
					td(width='25%') Example 1:
					th(width='5%')!= o2_icon
					th(width='15%').text-success +5
					th(width='5%')!= zz_icon
					th(width='15%').text-success +5
					th +10 pts / round

			p
				| The kind and the amount of resource produced is different for each system.
				| This makes some systems more critical than others.

			table.table
				tr
					td(width='25%') Example 2:
					th(width='5%')!= o2_icon
					th(width='15%').text-success +15
					th(width='5%')!= zz_icon
					th(width='15%').text-success +10
					th +20 pts / round

			p
				| Also, some systems require one kind of resource to produce another kind.

			table.table
				tr
					td(width='25%') Example 3:
					th(width='5%')!= o2_icon
					th(width='15%').text-success +20
					th(width='5%')!= zz_icon
					th(width='15%').text-danger -5
					th +25 pts / round

			p
				| Unfortunately, the development of these systems goes for centuries
				| and their well behavior cannot be guaranted.
				| If the system does not respond as expected, no resource is produced.


			h4 Debugging the life-support systems
			p
				| In this competition, you are asked to debug the main life support
				| systems of the dome and save its inhabitants.
				| Remember, if one of the resources reaches 0, then everyone under the dome
				| dies.
				strong.text-danger &nbsp;This means that you instantaneously lose the
					| competition and have to leave the room immediately.

			p
				| You will find the source code of the life-support systems that you have
				| to debug on the competition computer you are using.
				| Simply navigate to the challenge directory:
				pre
					| $ cd competition_debug/
					| $ ls
					| access_panel
					| alu_sim/
					| atomic_engine/
					| ...

			p
				| Each system is explained by its own documentation. See the
				| README.md file in each directory:
				pre
					| cat access_panel/README.md

			p
				| Once you have debugged a system you MUST push it to your team repository
				| so the fixed version will be available for the cron to test.

				pre
					| cd bug_01/
					| vim src/main.nit # do edits and fix that bug!
					| git add src/*
					| git commit -m "I fixed that bug!"
					| git push origin master

			p
				| That's it! The new version of the system is deployed and you can
				| wait for the cron to test it.
				| Check your dome view page for more information on the program,
				| the resources it produces and the status of the last check performed
				| by the cron.
